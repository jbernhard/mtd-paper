#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools
import pickle

import numpy as np
# import matplotlib.pyplot as plt
from scipy import interpolate


Spline = functools.partial(interpolate.InterpolatedUnivariateSpline, k=3)

experiment = 'alice'


def main():
    mult, cent_width, cent_high = np.loadtxt('{}_mult.dat'.format(experiment),
                                             usecols=(2, 3, 4))[::-1].T

    cent_width *= 100
    cent_high *= 100
    cent_mid = cent_high - .5*cent_width
    mult_interp = Spline(cent_mid, mult)

    # plt.plot(cent_high, mult, ls='steps-pre')
    # plt.plot(cent_mid, mult, 'o')
    # x = np.linspace(0, 95, 10000)
    # plt.plot(x, mult_interp(x))
    # plt.show()

    cent_bin_width = 5
    cent_bins = np.array([[i, i+cent_bin_width] for i in range(0, 51, 10)])
    cent_bins_mid = cent_bins.mean(axis=1)

    cent_bins_mult = np.array([mult_interp.integral(*b)
                               for b in cent_bins]) / cent_bin_width

    keys = 'mean', 'stat', 'sys'
    data = {
        'cent': cent_bins_mid,
        'mult': dict(zip(
            keys,
            (cent_bins_mult, 1e-8*cent_bins_mult, .06*cent_bins_mult)
        ))
    }

    for n in 2, 3:
        vn_mult, vn, vn_stat, vn_sys = np.loadtxt(
            '{}_v{}-2.dat'.format(experiment, n), unpack=True
        )

        data['v{}'.format(n)] = dict(zip(
            keys,
            (Spline(vn_mult, y)(cent_bins_mult) for y in (vn, vn_stat, vn_sys))
        ))

    with open('{}.pkl'.format(experiment), 'wb') as f:
        pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)


if __name__ == "__main__":
    main()
