#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pickle
import sys

import numpy as np
import mtd

from data_handler import DataHandler


def main():
    print('loading data')
    try:
        ic = sys.argv[1]
    except IndexError:
        ic = 'glb'

    exp = 'alice'
    data = DataHandler(ic, exp, weights=(1.2, 1.0, 0.6))
    ndim = data.ndim

    with open('{}-data_handler.pkl'.format(ic), 'wb') as f:
        pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)

    # GP kernel: squared-exponential with noise
    # ExpSquaredKernel pars are the _squares_ of the length scales
    kernel = (
        1. *
        mtd.kernels.ExpSquaredKernel(np.full(ndim, .5), ndim=ndim) +
        mtd.kernels.WhiteKernel(1e-8, ndim=ndim)
    )

    # prior for kernel hyperparameters
    # used to sample random starting points for MLE training
    prior = (
        mtd.priors.InvGammaPrior() +
        mtd.priors.LogPrior(low=.5**2, high=3.**2) * ndim +
        mtd.priors.LogPrior(low=.001, high=1.)
    )

    # hyperparameter boundaries [on log of pars]
    bounds = (
        [(None, None)] +
        [2.*np.log((.3, 10.))] * ndim +  # sane range for length scales
        [(None, None)]
    )

    print('starting GPs')
    npc = 5
    mgp = mtd.MultiGP(data.design, data.training_data, kernel, npc=npc)
    results = {}
    print('{} PCs explain {:g} of variance'.format(
        npc, mgp.pca.weights[:npc].sum()))

    results['pca'] = mgp.pca

    mgp.train(prior, nstarts=100, verbose=True, bounds=bounds)
    results['training_results'] = mgp.training_results
    results['kernel_pars'] = np.array([mgp.get_kernel_pars(n)
                                       for n in range(npc)])

    mgp.calibrate(data.cal_data, yerr=.06,
                  nwalkers=500, nsteps=30000, nburnsteps=3000,
                  verbose=True)
    results['cal_chain'] = mgp.cal_flatchain
    results['cal_samples'] = data.unpack(mgp.cal_samples)
    results['cal_logprob'] = mgp.cal_sampler.flatlnprobability

    if ic == 'glb':
        print('predicting validation design')
        with open('../data/model/{}-validation.pkl'.format(ic), 'rb') as f:
            vdesign = pickle.load(f)['design']
        pred_mean, pred_var = mgp.predict(vdesign, mean_only=False)
        pred_std = np.sqrt(pred_var, out=pred_var)
        results['validation'] = data.unpack(pred_mean, pred_std)

    print('saving results')
    with open('{}.pkl'.format(ic), 'wb') as f:
        pickle.dump(results, f, pickle.HIGHEST_PROTOCOL)


if __name__ == "__main__":
    main()
