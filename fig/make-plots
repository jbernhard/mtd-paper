#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import collections
import functools
import inspect
import pickle
import sys

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patch
import matplotlib.ticker as tick
import scipy.optimize as opt
import george
import mtd


aspect = 1/1.618
resolution = 72.27
textwidth = 307.28987/resolution
textheight = 261.14662/resolution
textiny, texsmall, texnormal = 5.5, 6.5, 8.
offblack = '#262626'

plt.rcdefaults()
plt.rcParams.update({
    'font.family': 'sans-serif',
    'font.sans-serif': ['CMU Sans Serif'],
    'mathtext.fontset': 'custom',
    'mathtext.default': 'it',
    'mathtext.rm': 'sans',
    'mathtext.it': 'sans:italic',
    'mathtext.cal': 'sans',
    'font.size': texsmall,
    'legend.fontsize': texsmall,
    'axes.labelsize': texsmall,
    'axes.titlesize': texsmall,
    'xtick.labelsize': textiny,
    'ytick.labelsize': textiny,
    'lines.linewidth': .8,
    'lines.markeredgewidth': .1,
    'patch.linewidth': .8,
    'axes.linewidth': .4,
    'xtick.major.width': .4,
    'ytick.major.width': .4,
    'xtick.minor.width': .4,
    'ytick.minor.width': .4,
    'xtick.major.size': 1.4,
    'ytick.major.size': 1.4,
    'xtick.minor.size': 0.9,
    'ytick.minor.size': 0.9,
    'xtick.major.pad': 1.5,
    'ytick.major.pad': 1.5,
    'text.color': offblack,
    'axes.edgecolor': offblack,
    'axes.labelcolor': offblack,
    'xtick.color': offblack,
    'ytick.color': offblack,
    'legend.numpoints': 1,
    'legend.scatterpoints': 1,
    'legend.frameon': False,
    'pdf.fonttype': 42
})


class Results(dict):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__dict__ = self

observables = (
    ('mult', r'$\langle N_\mathrm{ch} \rangle$'),
    ('v2', r'$v_2\{2\}$'),
    ('v3', r'$v_3\{2\}$')
)

ic_data = collections.OrderedDict((
    ('glb', Results(
        display_name='Glauber',
        cmap=plt.cm.Blues,
        labels=('Normalization', r'$\alpha$',
                r'$\tau_0$', r'$\eta/s$', r'$k_\pi$'),
        initial_params=(57, 0.12, 0.6, 0.08, 0.5),
        param_ranges=((20., 60.), (.05, .3), (.2, 1.), (0., .3), (.2, 1.08))
    )),
    ('kln', Results(
        display_name='KLN',
        cmap=plt.cm.Greens,
        labels=('Normalization', r'$\lambda$',
                r'$\tau_0$', r'$\eta/s$', r'$k_\pi$'),
        initial_params=(9.9, 0.14, 0.6, 0.20, 0.5),
        param_ranges=((5., 15.), (.1, .3), (.2, 1.), (0., .3), (.2, 1.08))
    ))
))

for ic, data in ic_data.items():
    with open('../mcmc/{}.pkl'.format(ic), 'rb') as f:
        # pca, training_samplers, kernel_pars
        # cal_chain, cal_samples, cal_logprob
        # validation
        data.update(pickle.load(f))
    with open('../data/model/{}.pkl'.format(ic), 'rb') as f:
        # cent, design, mult, v2, v3
        data.update(pickle.load(f))

experiment = 'alice'

with open('../data/exp/{}.pkl'.format(experiment), 'rb') as f:
    exp = pickle.load(f)


plotfns = {}


def _register_plotfn(f):
    name = f.__name__

    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print(name)
        f(*args, **kwargs)
        plt.savefig(name + '.pdf')
        plt.close()

    plotfns[name] = wrapper


def plotfn(f):
    p = tuple(inspect.signature(f).parameters.values())
    if (
            len(p) >= 2 and
            p[0].name == 'ic' and
            p[0].default is inspect.Parameter.empty and
            p[1].name == 'data'
    ):
        for ic, data in ic_data.items():
            g = functools.partial(f, ic, data)
            g.__name__ = '_'.join((f.__name__, ic))
            _register_plotfn(g)
    else:
        _register_plotfn(f)


def finish(despine=True, remove_ticks=True, pad=0., h_pad=None, w_pad=None):
    fig = plt.gcf()

    for ax in fig.axes:
        for spine in 'top', 'right':
            ax.spines[spine].set_visible(False)
        if remove_ticks:
            for ax_name in 'xaxis', 'yaxis':
                getattr(ax, ax_name).set_ticks_position('none')
        else:
            ax.xaxis.set_ticks_position('bottom')
            ax.yaxis.set_ticks_position('left')

    fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad)


def set_loc(ax, xy=None, nbins=5, steps=(1, 2, 3, 4, 10), prune=None):
    if xy == 'x':
        axes = ax.xaxis,
    elif xy == 'y':
        axes = ax.yaxis,
    else:
        axes = ax.xaxis, ax.yaxis

    for axis in axes:
        axis.set_major_locator(
            tick.MaxNLocator(nbins=nbins, steps=steps, prune=prune)
        )


@plotfn
def cal_post(ic, data):
    chain = data.cal_chain.T
    labels = data.labels
    cmap = data.cmap
    levels = (.68, .95, .99)

    line_color = cmap(.8)
    fill_color = cmap(.5, alpha=.1)
    level_colors = cmap(np.linspace(.5, .9, len(levels)))[::-1]

    nxy = chain.shape[0]
    assert nxy == len(labels)

    ranges = data.param_ranges

    with plt.rc_context({'xtick.labelsize': 5, 'ytick.labelsize': 5}):
        fig, axes = plt.subplots(nrows=nxy, ncols=nxy,
                                 sharex='col', sharey='row',
                                 figsize=(1.03*textheight, 1.03*textheight))

        for ax, x, (xmin, xmax) in zip(axes.diagonal(), chain, ranges):
            counts, edges = np.histogram(
                x, bins=100, range=(xmin, xmax), density=True
            )
            middles = .5 * (edges[1:] + edges[:-1])
            counts *= .9 * (xmax - xmin) / counts.max()
            counts += xmin
            ax.plot(middles, counts, color=line_color, lw=.55)
            ax.fill_between(middles, counts, color=fill_color)
            ax.set_xlim(xmin, xmax)
            ax.set_ylim(xmin, xmax)

        for ny, nx in zip(*np.tril_indices_from(axes, k=-1)):
            x = chain[nx]
            y = chain[ny]
            hist = functools.partial(
                np.histogram2d, x, y, range=(ranges[nx], ranges[ny])
            )

            ax = axes[ny][nx]
            H, xedges, yedges = hist(bins=100)
            H[H == 0] = None
            ax.pcolorfast(xedges, yedges, H.T, cmap=cmap)

            ax = axes[nx][ny]
            H, xedges, yedges = hist(bins=30)
            xmids = .5*(xedges[1:] + xedges[:-1])
            ymids = .5*(yedges[1:] + yedges[:-1])
            Hsorted = np.sort(H, axis=None)
            cs = Hsorted.cumsum()
            cs /= cs[-1]
            V = np.array([Hsorted[np.count_nonzero(cs <= 1.-i)]
                          for i in levels])
            ax.plot(np.median(y), np.median(x), 'o', ms=2.5, mew=0,
                    color=cmap(1., alpha=.9))
            ax.contour(ymids, xmids, H, V, colors=level_colors, linewidths=.55)

        for ax in axes.flat:
            set_loc(ax, prune='lower')
        for n, label in enumerate(labels):
            axes[-1][n].set_xlabel(label, labelpad=2)
            axes[n][0].set_ylabel(label)

        finish(remove_ticks=False)


@plotfn
def post_compare():
    with plt.rc_context({
        'axes.labelsize': texnormal,
        'xtick.labelsize': texsmall,
        'xtick.major.size': 2.5,
        'ytick.major.size': 2.5,
        'xtick.minor.size': 2.0,
        'ytick.minor.size': 2.0,
    }):
        fig = plt.figure(figsize=(.8*textwidth, .8*aspect*textwidth))
        ax = fig.gca()

        idx = 3
        ymax = 0

        for data in ic_data.values():
            x = data.cal_chain[:, idx]
            counts, edges = np.histogram(
                x, bins=128, range=data.param_ranges[idx], density=True)
            middles = .5 * (edges[1:] + edges[:-1])
            ax.plot(middles, counts, color=data.cmap(.8))
            ax.fill_between(middles, counts, color=data.cmap(.5, alpha=.1))
            x0 = data.initial_params[idx]
            counts_max = counts.max()
            ax.plot((x0, x0), (0, counts_max), color='.5', lw=.5)
            ax.text(np.median(x), counts_max + .3, data.display_name,
                    fontsize=texnormal, ha='center', va='bottom')
            ax.text(x0 + .005, .9*counts_max, '{:.2f}'.format(x0),
                    fontsize=texnormal, ha='left', va='top')
            ymax = max(ymax, counts_max)

        ax.set_xlabel(data.labels[idx])
        set_loc(ax, 'x')
        ax.xaxis.set_minor_locator(tick.AutoMinorLocator(5))
        ax.spines['left'].set_visible(False)
        ax.set_yticks([])

        finish(remove_ticks=False)
        ax.set_ylim(0, ymax + 2)


@plotfn
def prior_draws():
    nic = len(ic_data)
    nobs = len(observables)
    fig, axes = plt.subplots(
        nrows=nic, ncols=nobs, sharex='col',
        figsize=(textwidth, 1.4*nic/nobs*aspect*textwidth))

    ylims = 6000., .14, .045

    for row, data in zip(axes, ic_data.values()):
        row[0].set_ylabel(data.display_name)
        color = data.cmap(.6)
        for ax, (obs, label), ymax in zip(row, observables, ylims):
            x = data['cent']
            for y in data[obs]:
                ax.plot(x, y, color=color, alpha=.1, lw=.3)

            ax.errorbar(exp['cent'], exp[obs]['mean'], yerr=exp[obs]['sys'],
                        fmt='o', lw=.5, ms=1.6, capsize=0, color='.2')
            set_loc(ax, 'y', nbins=4)

            ax.set_ylim(0, ymax)

            if ax.is_first_row():
                ax.set_title(label)
            else:
                ax.set_xlabel('Centrality %')
                ax.set_xlim(0, x.max() + .5)

    finish(pad=.2, w_pad=.5)


@plotfn
def post_draws():
    nic = len(ic_data)
    nobs = len(observables)
    fig, axes = plt.subplots(
        nrows=nic, ncols=nobs, sharex='col',
        figsize=(textwidth, 1.4*nic/nobs*aspect*textwidth))

    sample_idx = np.random.randint(0, ic_data['glb']['cal_chain'].shape[0],
                                   size=100)

    # ylims = 3200., .12, .035
    ylims = 6000., .14, .045

    for row, data in zip(axes, ic_data.values()):
        row[0].set_ylabel(data.display_name)
        color = data.cmap(.6)
        for ax, (obs, label), ymax in zip(row, observables, ylims):
            x = data['cent']
            samples = data.cal_samples[obs]
            for i in sample_idx:
                ax.plot(x, samples[i], color=color, alpha=.1, lw=.3)

            ax.errorbar(exp['cent'], exp[obs]['mean'], yerr=exp[obs]['sys'],
                        fmt='o', lw=.5, ms=1.6, capsize=0, color='.2')
            set_loc(ax, 'y', nbins=4)

            ax.set_ylim(0, ymax)

            if ax.is_first_row():
                ax.set_title(label)
            else:
                ax.set_xlabel('Centrality %')
                ax.set_xlim(0, x.max() + .5)

    finish(pad=.2, w_pad=.5)


@plotfn
def validation(ic='glb'):
    predicted = ic_data[ic].validation

    with open('../data/model/{}-validation.pkl'.format(ic), 'rb') as f:
        validation_data = pickle.load(f)

    ncent = len(validation_data['cent'])
    colors = plt.cm.Set2(np.linspace(0, (ncent-1)/8, ncent))
    symbols = 'o', '^', 's'

    fig, axes = plt.subplots(ncols=3,
                             figsize=(textwidth, .6*aspect*textwidth))

    xylim = 5300., .12, .043
    xyticks = np.r_[0:5000:3j], np.r_[0:.12:4j], np.r_[0:.04:3j]

    for ax, (obs, label), lim, ticks in zip(axes, observables, xylim, xyticks):
        for cent, pred, pred_err, val, val_err, fmt, color in zip(
                validation_data['cent'],
                predicted[obs]['mean'].T[::2],
                predicted[obs]['std'].T[::2],
                validation_data[obs].T,
                validation_data[obs + '_err'].T,
                symbols,
                colors):
            ax.errorbar(
                pred, val, xerr=2*pred_err, yerr=2*val_err,
                fmt=fmt, ms=2, lw=.5, capsize=0, color=color, alpha=.7,
                label='–'.join(str(int(cent+d)) for d in (-2.5, 2.5)) + '%',
                zorder=(-int(cent))
            )

        ax.set_aspect('equal')
        ax.set_xlim(0, lim)
        ax.set_ylim(0, lim)
        ax.plot(ax.get_xlim(), ax.get_ylim(),
                lw=.5, color='.5', alpha=.6, zorder=1)

        ax.set_xticks(ticks)
        ax.set_yticks(ticks[1:])

        ax.set_xlabel('Predicted ' + label)

        if ax.is_first_col():
            ax.set_ylabel('Observed', labelpad=2)
            ax.legend(loc='upper left', handletextpad=.1)

    finish(pad=.2, w_pad=-.6)


@plotfn
def gp():
    np.random.seed(321478)
    plt.rc('axes', color_cycle=plt.cm.Set2(np.linspace(0, 1, 8)).tolist())

    fig, axes = plt.subplots(nrows=2, sharex='col',
                             figsize=(.45*textwidth, .85*textheight))

    t = np.linspace(0, 5, 1000)
    x = np.linspace(.5, 4.5, 4)
    gp = george.GP(
        george.kernels.ExpSquaredKernel(1.) +
        george.kernels.WhiteKernel(1e-8)
    )
    gp.compute(x)
    y = gp.sample()
    y -= .5*(y.max() + y.min())

    mean_kw = dict(color='.42', dashes=(3.5, 1.5))
    err_kw = dict(color='.9')

    ax = axes[0]
    ax.axhspan(-2, 2, **err_kw)
    ax.axhline(0, **mean_kw)
    for s in gp.sample(t, size=4):
        ax.plot(t, s)

    ax = axes[1]
    mu, cov = gp.predict(y, t)
    std = np.sqrt(cov.diagonal())
    ax.fill_between(t, mu+2*std, mu-2*std, **err_kw)
    ax.plot(t, mu, **mean_kw)
    for s in gp.sample_conditional(y, t, size=3):
        ax.plot(t, s)
    ax.plot(x, y, 'o', ms=3, color=offblack)

    ax.set_xlabel('Input')

    ax.annotate(
        '\n'.join([
            'Dashed line: mean',
            'Band: 2$\\sigma$ uncertainty',
            'Colored lines: sampled functions'
        ]), (.03, .03), xycoords='axes fraction',
        ha='left', va='bottom', fontsize=7)

    titles = ['Random functions',
              'Conditioned on training data (dots)']

    for ax, title in zip(axes, titles):
        ax.annotate(title, (.5, .995), xycoords='axes fraction',
                    ha='center', va='top', fontsize=7)

    for ax in axes:
        ax.set_ylabel('Output')
        ax.set_xlim(0, 5)
        ax.set_ylim(-2.5, 2.5)

    finish(pad=.2, h_pad=1)


@plotfn
def training():
    fig, axes = plt.subplots(ncols=3, sharey='row',
                             figsize=(textwidth, .7*aspect*textwidth))

    np.random.seed(234325)

    x = np.linspace(.06, .94, 50)
    x += np.random.normal(scale=.1/x.size, size=x.size)
    t = np.linspace(0, 1, 1000)
    gp = george.GP(
        george.kernels.ExpSquaredKernel(.5**2) +
        george.kernels.WhiteKernel(.2**2)
    )
    gp.compute(x)
    y = gp.sample()
    y -= y.mean()

    actual_pars = np.copy(gp.kernel.pars)

    def nll(vector):
        gp.kernel.vector = vector
        ll = gp.lnlikelihood(y, quiet=True)
        grad = gp.grad_lnlikelihood(y, quiet=True)
        return -ll, -grad

    opt.minimize(nll, gp.kernel.vector, jac=True)
    ml_pars = np.copy(gp.kernel.pars)

    names_pars = (
        ('Overfit', (.02**2, .001**2)),
        ('Oversmooth', (3.**2, .3**2)),
        ('Max. likelihood', ml_pars),
        ('Actual', actual_pars),
    )
    fmt_str = '{}\n' + r'$\ell$ = {:.3g}, $\sigma_n$ = {:.3g}'
    color = '#77C0DC'

    for ax, (name, pars) in zip(axes, names_pars):
        gp.kernel.pars = pars
        mu, cov = gp.predict(y, t)
        std = np.sqrt(cov.diagonal())
        ax.fill_between(t, mu+2*std, mu-2*std,
                        facecolor=color, edgecolor='none', alpha=.18)
        ax.plot(t, mu, color=color)

        ax.plot(x, y, 'o', ms=1.6, color=offblack)

        ax.text(.5, 2.25, fmt_str.format(name, *np.sqrt(pars)),
                fontsize=texnormal, ha='center', va='top')
        ax.set_xlim(0, 1)
        ax.set_xlabel('$x$')

    name, pars = names_pars[-1]
    ax.text(.5, -2.25, fmt_str.format(name, *np.sqrt(pars)),
            fontsize=texnormal, ha='center', va='bottom')

    axes[0].set_ylim(-2.4, 2.4)
    axes[0].set_ylabel('$y$', labelpad=1)

    finish(pad=.2, h_pad=.01)


@plotfn
def design():
    fig = plt.figure(figsize=(.5*textwidth, .5*textwidth))
    ratio = 5
    gs = plt.GridSpec(ratio + 1, ratio + 1)

    ax_j = fig.add_subplot(gs[1:, :-1])
    ax_x = fig.add_subplot(gs[0, :-1], sharex=ax_j)
    ax_y = fig.add_subplot(gs[1:, -1], sharey=ax_j)

    data = ic_data['glb']
    y, x = data.design.T[2:4]
    ylabel, xlabel = data.labels[2:4]

    color = [0.15, 0.65, 0.65]
    hist_kw = dict(bins=20, color=color + [.5], edgecolor='white')

    ax_j.plot(x, y, 'o', ms=2.8, color=color, mec='white', mew=.3)
    ax_x.hist(x, **hist_kw)
    ax_y.hist(y, orientation='horizontal', **hist_kw)

    for ax in fig.axes:
        ax.tick_params(top='off', right='off')
        spines = ['top', 'right']
        if ax is ax_x:
            spines += ['left']
        elif ax is ax_y:
            spines += ['bottom']
        for spine in spines:
            ax.spines[spine].set_visible(False)
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')

    for ax in ax_x, ax_y:
        ax.tick_params(labelbottom='off', labelleft='off')

    ax_j.set_xlim(0., .3)
    ax_j.set_ylim(.2, 1.)
    ax_j.set_xticks((.0, .1, .2, .3))
    ax_j.set_yticks((.2, .4, .6, .8, 1.))
    ax_j.set_xlabel(xlabel, labelpad=2)
    ax_j.set_ylabel(ylabel, labelpad=3)

    gs.tight_layout(fig=fig, pad=0.)


@plotfn
def pc_scatter(ic='glb'):
    fig = plt.figure(figsize=(.5*textwidth, .5*textwidth))
    ratio = 5
    gs = plt.GridSpec(ratio + 1, ratio + 1)

    ax_j = fig.add_subplot(gs[1:, :-1])
    ax_x = fig.add_subplot(gs[0, :-1], sharex=ax_j)
    ax_y = fig.add_subplot(gs[1:, -1], sharey=ax_j)

    data = ic_data[ic]
    cent_idx = 2
    x = np.sqrt(data['mult'][:, cent_idx])
    y = data['v2'][:, cent_idx]

    color, color_alpha = (data.cmap(.65, alpha=a) for a in (1., .5))
    hist_kw = dict(bins=16, color=color_alpha, edgecolor='white')

    ax_j.plot(x, y, 'o', ms=2.8, color=color, mec='white', mew=.3, zorder=10)

    xy = np.column_stack((x, y))
    xymean = xy.mean(axis=0)
    xystd = xy.std(axis=0)
    xy -= xymean
    xy /= xystd
    pca = mtd.PCA(xy)
    pc = 2.2 * xystd * pca.var[:, np.newaxis] * pca.pc

    for w, p in zip(pca.weights, pc):
        if np.all(p < 0):
            p *= -1
        ax_j.annotate('', xymean + p, xymean,
                      zorder=20, arrowprops=dict(
                          arrowstyle='->', shrinkA=0, shrinkB=0,
                          color=offblack, lw=.75
                      ))
        ax_j.text(*(xymean + p + (.8, .0015)*np.sign(p)),
                  s='{:.0f}%'.format(100*w),
                  color=offblack, ha='center', va='center', zorder=20)

    ax_x.hist(x, **hist_kw)
    ax_y.hist(y, orientation='horizontal', **hist_kw)

    for ax in fig.axes:
        ax.tick_params(top='off', right='off')
        spines = ['top', 'right']
        if ax is ax_x:
            spines += ['left']
        elif ax is ax_y:
            spines += ['bottom']
        for spine in spines:
            ax.spines[spine].set_visible(False)
        for ax_name in 'xaxis', 'yaxis':
            getattr(ax, ax_name).set_ticks_position('none')

    for ax in ax_x, ax_y:
        ax.tick_params(labelbottom='off', labelleft='off')

    ax_j.set_xlim(10, 53)
    ax_j.set_ylim(.035, .089)
    ax_j.set_xticks(np.arange(10, 51, 10))
    ax_j.set_yticks(np.arange(.04, .09, .01))
    ax_j.set_xlabel(r'$\sqrt{\langle N_\mathrm{ch} \rangle}$')
    ax_j.set_ylabel(r'$v_2\{2\}$')

    ax_j.annotate(
        data.display_name + ' ' + '–'.join(
            str(int(data['cent'][cent_idx]+d)) for d in (-2.5, 2.5)) + '%',
        (.95, .05), xycoords='axes fraction', ha='right', va='bottom')

    gs.tight_layout(fig=fig, pad=0.)


@plotfn
def pc_var():
    plt.figure(figsize=(.5*textwidth, .6*textwidth*aspect))
    ax = plt.gca()

    for ic, data in ic_data.items():
        w = data.pca.weights.cumsum()[:6]
        ax.plot(np.arange(1, w.size+1), w,
                marker='o' if ic == 'glb' else '^',
                ms=3.5, mew=.2, mec='white',
                color=data.cmap(.75), label=data.display_name)

    ax.set_yticks(np.arange(.7, 1.01, .1))
    ax.set_xlim(.8, w.size + .2)

    ax.set_xlabel('Number of PC')
    ax.set_ylabel('Explained variance')
    ax.legend(loc='lower right')

    finish(pad=.2)


@plotfn
def sensitivity(ic, data):
    sys.path.append('../mcmc')
    with open('../mcmc/{}-data_handler.pkl'.format(ic), 'rb') as f:
        data_handler = pickle.load(f)

    npc = 5
    ndim = data_handler.ndim
    kernel = (
        1. *
        mtd.kernels.ExpSquaredKernel(np.full(ndim, .5), ndim=ndim) +
        mtd.kernels.WhiteKernel(1e-8, ndim=ndim)
    )
    mgp = mtd.MultiGP(data_handler.design, data_handler.training_data,
                      kernel, npc=npc)

    for n, pars in enumerate(data.kernel_pars):
        mgp.set_kernel_pars(n, pars)

    post_mean = data.cal_chain.mean(axis=0)
    ntest = 200

    fig, axes = plt.subplots(nrows=len(observables), ncols=ndim,
                             sharex='col', sharey='row',
                             figsize=(1.1*textwidth, 1.03*textheight))

    for n, (col, samples) in enumerate(zip(axes.T, data.cal_chain.T)):
        interval = np.percentile(samples, (16, 84))
        for ax, obs in zip(col, observables):
            test_points = np.empty((ntest, ndim))
            test_points[:] = post_mean

            xmin, xmax = data.param_ranges[n]
            X = np.linspace(xmin, xmax, ntest)
            test_points[:, n] = X

            pred_mean, pred_var = mgp.predict(test_points, mean_only=False)
            pred = data_handler.unpack(pred_mean, np.sqrt(pred_var))

            for icent in range(0, 5, 2):
                Y = pred[obs[0]]['mean'][:, icent]
                Yerr = pred[obs[0]]['std'][:, icent]

                color = data.cmap(.9 - .1*icent)[:3]

                centlabel = '–'.join(str(int(data.cent[icent]+d))
                                     for d in (-2.5, 2.5)) + '%'

                ax.plot(X, Y, color=color, lw=.5, zorder=50,
                        label=centlabel)
                ax.fill_between(X, Y+Yerr, Y-Yerr,
                                facecolor=color, alpha=.3,
                                edgecolor='none', zorder=30)

                exp_mean = exp[obs[0]]['mean'][icent]
                exp_err = exp[obs[0]]['sys'][icent]

                ax.plot(post_mean[n], exp_mean, 'o', ms=1.8, mew=0,
                        color=str(.3 + .05*icent))
                rect = patch.Rectangle((interval[0], exp_mean - exp_err),
                                       interval.ptp(), 2*exp_err, color='.8')
                ax.add_patch(rect)

            ax.set_xlim(xmin, xmax)

        ax.set_xlabel(data.labels[n], labelpad=3)

    for ax, obs, ymax in zip(axes[:, 0], observables, [4000, .12, .038]):
        ax.set_ylabel(obs[1], labelpad=3)
        ax.set_ylim(0, ymax)

    for ax in axes.flat:
        set_loc(ax)

    axes[-1, 0].legend(loc='lower right', labelspacing=.3, fontsize=textiny)

    for msg, ax in zip(
            ['$x$ = posterior mean\nband = 1$\sigma$ C.I.',
             '$y$ = ALICE value\nband = uncertainty'],
            axes[-1, 1:3]):
        ax.annotate(msg, (.07, .04), xycoords='axes fraction',
                    ha='left', va='bottom', fontsize=textiny)

    del mgp  # this should not be necessary!

    finish(w_pad=.3)


def main():
    if len(sys.argv) > 1:
        for a in sys.argv[1:]:
            if a.endswith('.pdf'):
                a = a[:-4]
            plotfns[a]()
    else:
        for fn in plotfns.values():
            fn()


if __name__ == "__main__":
    main()
