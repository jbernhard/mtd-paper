#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import functools
import pickle

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


aspect = 1/1.618
resolution = 72.27
columnwidth = 246/resolution
textwidth = 510/resolution
textiny, texsmall, texnormal = 8., 9.25, 10.

sns.set(
    context='paper',
    style='white',
    font='CMU Serif'
)


def plotfn(f):
    @functools.wraps(f)
    def wrapper(*args, **kwargs):
        print(f.__name__)
        f(*args, **kwargs)
        plt.savefig('{}.pdf'.format(f.__name__))
        plt.close()
    return wrapper


@plotfn
def training_posterior(ic):
    with open('../mcmc/{}.pkl'.format(ic), 'rb') as f:
        chain = pd.DataFrame(pickle.load(f)['training_samplers'][0].flatchain)

    def hist2d(*args, **kwargs):
        kwargs.pop('color', None)
        return plt.hist2d(*args, **kwargs)

    g = sns.PairGrid(chain, size=textwidth/chain.shape[1])
    g.map_diag(plt.hist, bins=20)
    g.map_lower(hist2d, bins=20, cmap='Blues')

    plt.gcf().subplots_adjust(wspace=.05, hspace=.05)


@plotfn
def prior_draws(ic, experiment):
    with open('../data/model/{}.pkl'.format(ic), 'rb') as f:
        model = pickle.load(f)
    with open('../data/exp/{}.pkl'.format(experiment), 'rb') as f:
        exp = pickle.load(f)

    fig, axes = plt.subplots(ncols=3, figsize=(textwidth, columnwidth*aspect))

    for obs, ax in zip(('mult', 'v2', 'v3'), axes):
        c = model['cent']
        for m in model[obs]:
            ax.plot(c, m, color='SkyBlue', alpha=.2, lw=.5)

        ax.errorbar(exp['cent'], exp[obs]['mean'], yerr=exp[obs]['sys'],
                    fmt='o', lw=.8, ms=2, capsize=0, color='.2')

        ax.set_title(obs)
        ax.set_xlabel('Centrality %')
        ax.set_xlim(0, 55)

    plt.tight_layout(pad=0)


@plotfn
def posterior_draws(ic, experiment):
    with open('../data/model/{}.pkl'.format(ic), 'rb') as f:
        cent = pickle.load(f)['cent']
    with open('../data/exp/{}.pkl'.format(experiment), 'rb') as f:
        exp = pickle.load(f)
    with open('../mcmc/{}.pkl'.format(ic), 'rb') as f:
        mcmc = pickle.load(f)

    cal_samples = mcmc['cal_samples']
    cal_logprob = mcmc['cal_logprob']
    sample_idx = np.random.randint(0, cal_samples['mult'].shape[0], size=100)
    maxprob = cal_logprob.argmax()

    fig, axes = plt.subplots(ncols=3, figsize=(textwidth, columnwidth*aspect))

    for ax, obs in zip(axes, ('mult', 'v2', 'v3')):
        samples = cal_samples[obs]

        for i in sample_idx:
            ax.plot(cent, samples[i], color='SkyBlue', alpha=.2, lw=.5)

        ax.plot(cent, samples[maxprob], color='Crimson', lw=.5)

        ax.errorbar(exp['cent'], exp[obs]['mean'], yerr=exp[obs]['sys'],
                    fmt='o', lw=.8, ms=2, capsize=0, color='.2')

        ax.set_title(obs)
        ax.set_xlabel('Centrality %')
        ax.set_xlim(0, 55)
        ax.set_ylim(ymin=0)

    plt.tight_layout(pad=0)


@plotfn
def calibration_posterior(ic):
    with open('../mcmc/{}.pkl'.format(ic), 'rb') as f:
        chain = pd.DataFrame(pickle.load(f)['cal_chain'])

    def hist2d(*args, **kwargs):
        kwargs.pop('color', None)
        return plt.hist2d(*args, **kwargs)

    g = sns.PairGrid(chain, size=textwidth/chain.shape[1])
    g.map_diag(plt.hist, bins=100)
    g.map_lower(hist2d, bins=100, cmap='Blues')

    plt.gcf().subplots_adjust(wspace=.05, hspace=.05)


@plotfn
def validation(ic):
    with open('../mcmc/{}.pkl'.format(ic), 'rb') as f:
        predicted = pickle.load(f)['validation']
    with open('../data/model/{}-validation.pkl'.format(ic), 'rb') as f:
        actual = pickle.load(f)

    fig, axes = plt.subplots(ncols=3, figsize=(textwidth, .5*aspect*textwidth))
    for ax, obs in zip(axes, ('mult', 'v2', 'v3')):
        mean, std = (predicted[obs][i].T[::2] for i in ('mean', 'std'))
        act = actual[obs].T

        for c, m, e, a in zip(actual['cent'], mean, std, act):
            ax.errorbar(m, a, xerr=2*e,
                        fmt='o', ms=2.5, lw=.6, capsize=0, alpha=.75,
                        label=str(c))

        xymax = max(lim[1] for lim in (ax.get_xlim(), ax.get_ylim()))
        ax.set_xlim(0, xymax)
        ax.set_ylim(0, xymax)
        ax.plot(ax.get_xlim(), ax.get_ylim(),
                lw=.8, color='.5', alpha=.5, zorder=-10)

    plt.legend(loc='best')
    plt.tight_layout(pad=0)
    sns.despine(fig)


if __name__ == "__main__":
    ic = 'glb'
    experiment = 'alice'

    training_posterior(ic)
    validation(ic)
    calibration_posterior(ic)
    prior_draws(ic, experiment)
    posterior_draws(ic, experiment)
